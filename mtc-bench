#!/bin/bash

###########################################################
# Parse command line arguments
###########################################################

# Define default values for variables
flag_help=false
flag_file=false
option_file=""
COMMANDS=()
flag_verbose=false
flag_show_output=false

# Loop over arguments
while [[ "$#" -gt 0 ]]; do
    case "$1" in
    -h | --help)
        flag_help=true
        shift
        ;;
    -v | --verbose)
        flag_verbose=true
        shift
        ;;
    -s | --show-output)
        flag_show_output=true
        shift
        ;;
    -f | --file)
        flag_file=true
        option_file="$2"
        if [[ "$#" -eq 1 ]]; then
            >&2 echo "Error: Must specify a file with the -f option" >&2
            exit 1
        fi
        shift 2
        ;;
    *)
        if [[ "$1" == -* ]]; then
            >&2 echo "Error: Invalid option: $1" >&2
            exit 1
        fi
        COMMANDS+=("$1")
        shift
        ;;
    esac
done

###########################################################
# Validate and process arguments
###########################################################

# Print help message
if [[ "$flag_help" == true ]]; then
    >&2 echo "Usage: $0 [options]"
    >&2 echo "Options:"
    >&2 echo "  -h, --help    Print this help message"
    exit 0
fi

# Check for conflicting options
if [[ "$flag_file" == true && "${#COMMANDS[@]}" -ne 0 ]]; then
    >&2 echo "Error: Cannot specify both a file ($option_file) and COMMANDS (${commands[*]})" >&2
    exit 1
fi

# Check for missing options
if [[ "$flag_file" == false && "${#COMMANDS[@]}" -eq 0 ]]; then
    >&2 echo "Error: Must specify either a file or COMMANDS" >&2
    exit 1
fi

if [[ "$flag_file" == true && -z "$option_file" ]]; then
    >&2 echo "Error: Must specify a file with the -f option" >&2
    exit 1
fi

# Check for file existence
if [[ "$flag_file" == true && ! -f "$option_file" ]]; then
    >&2 echo "Error: File not found: '$option_file'" >&2
    exit 1
fi

###########################################################
# Read commands
###########################################################

RESULTS_BASE_DIR='mtc-results'
export RES_DIR=${RES_DIR:-"$RESULTS_BASE_DIR/$$"}
WARMUP=${WARMUP:-1}
REPS=${REPS:-10}
export TMP_RES_DIR=$(mktemp -d)

HYPERFINE_ARGS=()
if [[ "$flag_file" == true ]]; then
    >&2 echo "Reading commands from file: $option_file"
    # Initialize arrays
    first_column=()
    second_column=()
    last_line_cols=-1

    # Process each line in the CSV
    while IFS= read -r line; do
        if [[ $line =~ ^[[:space:]]*(\"[^\"]*\"|[^\",]*)[[:space:]]*$ ]]; then
            col1=$(echo "${BASH_REMATCH[1]}" | sed 's/^"//;s/"$//')
            col2=""
        elif [[ $line =~ ^[[:space:]]*(\"[^\"]*\"|[^\",]*)[[:space:]]*,[[:space:]]*(\"[^\"]+\"|[^\",]+)[[:space:]]*$ ]]; then
            col1=$(echo "${BASH_REMATCH[1]}" | sed 's/^"//;s/"$//')
            col2=$(echo "${BASH_REMATCH[2]}" | sed 's/^"//;s/"$//')
        else
            >&2 echo "Error: Invalid CSV format - line does not match expected format: $line"
            exit 1
        fi

        if [[ -z "$col1" && -z "$col2" ]]; then
            >&2 echo "Error: Invalid CSV format - line with empty fields: $line"
            exit 1
        elif [[ -z "$col1" || -z "$col2" ]]; then
            cols=1
        else
            cols=2
        fi

        if [[ $last_line_cols -ne -1 && $cols -ne $last_line_cols ]]; then
            >&2 echo "Error: Invalid CSV format - inconsistent number of fields: this line has $cols fields, but the previous line had $last_line_cols fields"
            exit 1
        fi

        last_line_cols=$cols

        # Append each field to the respective array
        first_column+=("$col1")
        second_column+=("$col2")
    done <"$option_file"

    for i in "${!first_column[@]}"; do
        if [[ -z "${second_column[$i]}" ]]; then
            COMMANDS+=("${first_column[$i]}")
            HYPERFINE_ARGS+=("psrecord --interval 0.1 --log $TMP_RES_DIR/cmd.log --plot $TMP_RES_DIR/cmd.png --include-children \"${first_column[$i]}\"")
        else
            COMMANDS+=("${second_column[$i]}")
            label="${first_column[$i]}"
            HYPERFINE_ARGS+=("psrecord --interval 0.1 --log $TMP_RES_DIR/$label.log --plot $TMP_RES_DIR/$label.png --include-children \"${second_column[$i]}\"")
        fi
    done
else
    >&2 echo "Commands read from command line arguments"
    for ((i = 0; i < ${#COMMANDS[@]}; i++)); do
        HYPERFINE_ARGS+=("psrecord --interval 0.1 --log $TMP_RES_DIR/cmd.log --plot $TMP_RES_DIR/cmd.png --include-children \"${COMMANDS[$i]}\"")
    done
fi

###########################################################
# Run benchmark
###########################################################

mkdir -p "$RES_DIR"
>&2 echo Running benchmark with "$REPS" repetitions and "$WARMUP" warm up rounds on these commands:
for i in "${!COMMANDS[@]}"; do
    label=$i
    if [[ -n "${second_column[$i]}" ]]; then
        label="${first_column[$i]}"
    fi
    if [[ "$flag_verbose" == true ]]; then
        >&2 echo -e "  [$label] ${HYPERFINE_ARGS[$i]}"
    else
        >&2 echo -e "  [$label] ${COMMANDS[$i]}"
    fi
done
>&2 echo -e "Saving results to '$RES_DIR'."

function cleanup() {
    >&2 echo "Cleaning up..."

    file=$(find "$TMP_RES_DIR" -maxdepth 1 -name "*.log" | head -n 1)
    if [[ -z "$file" ]]; then
        >&2 echo "  no log file found for cleanup"
        return
    fi

    label="${file##*/}"
    label="${label%.*}"
    if [[ -z "$label" ]]; then
        >&2 echo "Error: Could not determine label for cleanup"
    fi
    counter=1
    for ext in log png; do
        while [[ -f "$RES_DIR/$label-$counter.$ext" ]]; do
            counter=$((counter + 1))
        done
        >&2 echo "  moving $TMP_RES_DIR/$label.$ext to $RES_DIR/$label-$counter.$ext"
        mv "$TMP_RES_DIR/$label.$ext" "$RES_DIR/$label-$counter.$ext"
    done
}
export -f cleanup

# hyperfine options
HYPERFINE_FLAGS=""
if [[ "$flag_show_output" == true ]]; then
    HYPERFINE_FLAGS+="--show-output"
fi
HYPERFINE_FLAGS+=" --shell=bash --runs $REPS --warmup $WARMUP"
HYPERFINE_FLAGS+=" --export-json $RES_DIR/hyperfine.json"
HYPERFINE_FLAGS+=" --export-asciidoc $RES_DIR/hyperfine.txt"
HYPERFINE_FLAGS+=" --export-markdown $RES_DIR/hyperfine.md"
HYPERFINE_FLAGS+=" --export-csv $RES_DIR/hyperfine.csv"

if [[ "$flag_verbose" == true ]]; then
    >&2 echo "HYPERFINE_FLAGS: ${HYPERFINE_FLAGS}"
fi

WITH_PREPARE=()
for i in "${!HYPERFINE_ARGS[@]}"; do
    WITH_PREPARE+=("--prepare 'cleanup' '${HYPERFINE_ARGS[$i]}'")
done
# Call hyperfine with the formatted arguments
echo hyperfine $HYPERFINE_FLAGS "${WITH_PREPARE[@]}"
eval "hyperfine $HYPERFINE_FLAGS ${WITH_PREPARE[@]}"
cleanup

>&2 echo -e "\nDone. Results saved to '$RES_DIR'."
